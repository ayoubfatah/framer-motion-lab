import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuTrigger,
} from "@/shad-cn-components/ui/dropdown-menu";
import { Label } from "@/shad-cn-components/ui/label";
import {
  RadioGroup,
  RadioGroupItem,
} from "@/shad-cn-components/ui/radio-group";

import React, { useState, useCallback, useEffect } from "react";

type SortingOption = {
  label: string;
  value: string;
  default?: boolean;
};

type SortingCategoryConfig = {
  title: string;
  options: SortingOption[];
};

type SortingComponentProps = {
  config: SortingCategoryConfig[];
  onSortChange: (selectedSorts: Record<string, string>) => void;
};
export default function SortingComponent({
  config,
  onSortChange,
}: SortingComponentProps) {
  const [selectedSorts, setSelectedSorts] = useState<Record<string, string>>(
    {}
  );
  const [dropdownOpen, setDropdownOpen] = useState(false);

  const handleCategorySortChange = useCallback(
    (categoryTitle: string, sortValue: string) => {
      setSelectedSorts((prevSorts) => ({
        ...prevSorts,
        [categoryTitle]: sortValue,
      }));
    },
    []
  );

  const handleClearSort = useCallback(() => {
    setSelectedSorts({});
    onSortChange({});
    setDropdownOpen(false);
  }, [onSortChange, setDropdownOpen]);

  React.useEffect(() => {
    onSortChange(selectedSorts);
  }, [selectedSorts, onSortChange]);

  return (
    <DropdownMenu open={dropdownOpen} onOpenChange={setDropdownOpen}>
      <DropdownMenuTrigger asChild>
        <div className="flex gap-1 items-center cursor-pointer ">
          <div className="w-6 h-6">
            <img src="/images/sortByIcon.svg" alt="" />
          </div>
          <button className="cursor-pointer text-[#697077] font-medium text-lg tracking-[-0.02em]">
            Sort by
          </button>
        </div>
      </DropdownMenuTrigger>
      <DropdownMenuContent className="w-[200px] shadow-sm absolute right-[-42px] py-4 px-4 ">
        <h1 className="mb-2">Sort by </h1>

        {config.map((sortCategory) => (
          <SortingCategory
            key={sortCategory.title}
            config={sortCategory}
            onCategorySortChange={handleCategorySortChange}
            selectedSortValue={selectedSorts[sortCategory.title]}
          />
        ))}

        <button
          onClick={handleClearSort}
          className="underline  text-black/40 mt-2 cursor-pointer"
        >
          Clear
        </button>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

export function SortingCategory({
  config,
  onCategorySortChange,
  selectedSortValue,
}: {
  config: SortingCategoryConfig;
  onCategorySortChange: (categoryTitle: string, sortValue: string) => void;
  selectedSortValue: string | undefined;
}) {
  const handleValueChange = useCallback(
    (value: string) => {
      onCategorySortChange(config.title, value);
    },
    [config.title, onCategorySortChange]
  );

  const defaultConfigValue = config.options.find((c) => c.default)?.value;

  return (
    <div>
      <span className="text-black/40">{config.title}</span>
      <RadioGroup
        defaultValue={defaultConfigValue}
        className="items-center py-2 cursor-pointer"
        onValueChange={handleValueChange}
        value={selectedSortValue}
      >
        {config.options.map((option) => (
          <div key={option.value} className="flex items-center ">
            <RadioGroupItem
              value={option.value}
              id={`${config.title}-${option.value}`}
            />
            <Label
              className="text-[16px]  cursor-pointer pl-1"
              htmlFor={`${config.title}-${option.value}`}
            >
              {option.label}
            </Label>
          </div>
        ))}
      </RadioGroup>
    </div>
  );
}



-


import Layout from "@/ui-kit/layout/Layout";
import SortingComponent from "@/ui-kit/sorting/SortingComponent";
import { useCallback, useState } from "react";

const fakeSortingConfig: any = [
  {
    title: "Date",
    options: [
      { label: "Newest first", value: "newest", default: true },
      { label: "Oldest first", value: "oldest" },
    ],
  },
  {
    title: "Project Name",
    options: [
      { label: "A -> Z", value: "az" },
      { label: "Z -> A", value: "za" },
    ],
  },
];

const Notifications = () => {
  const [currentSorts, setCurrentSorts] = useState<Record<string, string>>({});

  const handleSortChange = useCallback((sorts: Record<string, string>) => {
    setCurrentSorts(sorts);
  }, []);

  return (
    <Layout>
      <div className="flex items-center justify-between">
        <h1 className="text-[#000F08] font-[400] text-[45px] capitalize">
          Notifications
        </h1>
        <SortingComponent
          config={fakeSortingConfig}
          onSortChange={handleSortChange}
        />
      </div>

      <div className="flex justify-between items-center p-8 bg-white rounded-xl drop-shadow-md h-[156px] w-full mt-[60px] ">
        <div className="flex  ">
          <div className="w-12 h-12">
            <img src="/images/notificationBellIcon.svg" alt="" />
          </div>
          <div className="ml-3">
            <div className="flex items-center mb-1">
              <h1 className="font-semibold text-xl text-[#000F08] ">
                Please Review and Update Your Project Brief
              </h1>
              <div className="bg-[#0F62FE] w-3 h-3 rounded-full ml-3"></div>
            </div>
            <div>
              <p className="text-[#878D96] font-medium text-base tracking-[-0.02em] mb-4">
                Please review our feedback and{" "}
                <span className="underline"> update your project brief</span>{" "}
                accordingly.
              </p>
              <div className="h-[22px]  w-fit rounded-xl  bg-[#F2F4F8] flex justify-center items-center">
                <span className="px-[10px] pt-[1px] pb-[2px] font-normal text-xs text-center">
                  Radiant Glow
                </span>
              </div>
            </div>
          </div>
        </div>
        <div className="flex justify-center items-center">
          <span className="h-fit font-medium text-base text-[#878D96] ">
            3h
          </span>
        </div>
      </div>
    </Layout>
  );
};

export default Notifications;
